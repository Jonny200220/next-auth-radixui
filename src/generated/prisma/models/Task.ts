
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Task` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Task
 * 
 */
export type TaskModel = runtime.Types.Result.DefaultSelection<Prisma.$TaskPayload>

export type AggregateTask = {
  _count: TaskCountAggregateOutputType | null
  _avg: TaskAvgAggregateOutputType | null
  _sum: TaskSumAggregateOutputType | null
  _min: TaskMinAggregateOutputType | null
  _max: TaskMaxAggregateOutputType | null
}

export type TaskAvgAggregateOutputType = {
  id: number | null
  priority: number | null
  creatorId: number | null
  assigneeId: number | null
}

export type TaskSumAggregateOutputType = {
  id: number | null
  priority: number | null
  creatorId: number | null
  assigneeId: number | null
}

export type TaskMinAggregateOutputType = {
  id: number | null
  title: string | null
  content: string | null
  status: $Enums.TaskStatus | null
  priority: number | null
  dueDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  creatorId: number | null
  assigneeId: number | null
}

export type TaskMaxAggregateOutputType = {
  id: number | null
  title: string | null
  content: string | null
  status: $Enums.TaskStatus | null
  priority: number | null
  dueDate: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  creatorId: number | null
  assigneeId: number | null
}

export type TaskCountAggregateOutputType = {
  id: number
  title: number
  content: number
  status: number
  priority: number
  dueDate: number
  createdAt: number
  updatedAt: number
  creatorId: number
  assigneeId: number
  _all: number
}


export type TaskAvgAggregateInputType = {
  id?: true
  priority?: true
  creatorId?: true
  assigneeId?: true
}

export type TaskSumAggregateInputType = {
  id?: true
  priority?: true
  creatorId?: true
  assigneeId?: true
}

export type TaskMinAggregateInputType = {
  id?: true
  title?: true
  content?: true
  status?: true
  priority?: true
  dueDate?: true
  createdAt?: true
  updatedAt?: true
  creatorId?: true
  assigneeId?: true
}

export type TaskMaxAggregateInputType = {
  id?: true
  title?: true
  content?: true
  status?: true
  priority?: true
  dueDate?: true
  createdAt?: true
  updatedAt?: true
  creatorId?: true
  assigneeId?: true
}

export type TaskCountAggregateInputType = {
  id?: true
  title?: true
  content?: true
  status?: true
  priority?: true
  dueDate?: true
  createdAt?: true
  updatedAt?: true
  creatorId?: true
  assigneeId?: true
  _all?: true
}

export type TaskAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Task to aggregate.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tasks to fetch.
   */
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tasks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Tasks
  **/
  _count?: true | TaskCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TaskAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TaskSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TaskMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TaskMaxAggregateInputType
}

export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
      [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTask[P]>
    : Prisma.GetScalarType<T[P], AggregateTask[P]>
}




export type TaskGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TaskWhereInput
  orderBy?: Prisma.TaskOrderByWithAggregationInput | Prisma.TaskOrderByWithAggregationInput[]
  by: Prisma.TaskScalarFieldEnum[] | Prisma.TaskScalarFieldEnum
  having?: Prisma.TaskScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TaskCountAggregateInputType | true
  _avg?: TaskAvgAggregateInputType
  _sum?: TaskSumAggregateInputType
  _min?: TaskMinAggregateInputType
  _max?: TaskMaxAggregateInputType
}

export type TaskGroupByOutputType = {
  id: number
  title: string
  content: string | null
  status: $Enums.TaskStatus
  priority: number
  dueDate: Date | null
  createdAt: Date
  updatedAt: Date
  creatorId: number
  assigneeId: number
  _count: TaskCountAggregateOutputType | null
  _avg: TaskAvgAggregateOutputType | null
  _sum: TaskSumAggregateOutputType | null
  _min: TaskMinAggregateOutputType | null
  _max: TaskMaxAggregateOutputType | null
}

type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TaskGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TaskGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TaskGroupByOutputType[P]>
      }
    >
  >



export type TaskWhereInput = {
  AND?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
  OR?: Prisma.TaskWhereInput[]
  NOT?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
  id?: Prisma.IntFilter<"Task"> | number
  title?: Prisma.StringFilter<"Task"> | string
  content?: Prisma.StringNullableFilter<"Task"> | string | null
  status?: Prisma.EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
  priority?: Prisma.IntFilter<"Task"> | number
  dueDate?: Prisma.DateTimeNullableFilter<"Task"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  creatorId?: Prisma.IntFilter<"Task"> | number
  assigneeId?: Prisma.IntFilter<"Task"> | number
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  assignee?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  comments?: Prisma.CommentListRelationFilter
}

export type TaskOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  dueDate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
  creator?: Prisma.UserOrderByWithRelationInput
  assignee?: Prisma.UserOrderByWithRelationInput
  comments?: Prisma.CommentOrderByRelationAggregateInput
}

export type TaskWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
  OR?: Prisma.TaskWhereInput[]
  NOT?: Prisma.TaskWhereInput | Prisma.TaskWhereInput[]
  title?: Prisma.StringFilter<"Task"> | string
  content?: Prisma.StringNullableFilter<"Task"> | string | null
  status?: Prisma.EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
  priority?: Prisma.IntFilter<"Task"> | number
  dueDate?: Prisma.DateTimeNullableFilter<"Task"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  creatorId?: Prisma.IntFilter<"Task"> | number
  assigneeId?: Prisma.IntFilter<"Task"> | number
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  assignee?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  comments?: Prisma.CommentListRelationFilter
}, "id">

export type TaskOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  dueDate?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
  _count?: Prisma.TaskCountOrderByAggregateInput
  _avg?: Prisma.TaskAvgOrderByAggregateInput
  _max?: Prisma.TaskMaxOrderByAggregateInput
  _min?: Prisma.TaskMinOrderByAggregateInput
  _sum?: Prisma.TaskSumOrderByAggregateInput
}

export type TaskScalarWhereWithAggregatesInput = {
  AND?: Prisma.TaskScalarWhereWithAggregatesInput | Prisma.TaskScalarWhereWithAggregatesInput[]
  OR?: Prisma.TaskScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TaskScalarWhereWithAggregatesInput | Prisma.TaskScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Task"> | number
  title?: Prisma.StringWithAggregatesFilter<"Task"> | string
  content?: Prisma.StringNullableWithAggregatesFilter<"Task"> | string | null
  status?: Prisma.EnumTaskStatusWithAggregatesFilter<"Task"> | $Enums.TaskStatus
  priority?: Prisma.IntWithAggregatesFilter<"Task"> | number
  dueDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Task"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Task"> | Date | string
  creatorId?: Prisma.IntWithAggregatesFilter<"Task"> | number
  assigneeId?: Prisma.IntWithAggregatesFilter<"Task"> | number
}

export type TaskCreateInput = {
  title: string
  content?: string | null
  status?: $Enums.TaskStatus
  priority?: number
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutTasksCreatedInput
  assignee: Prisma.UserCreateNestedOneWithoutTasksAssignedInput
  comments?: Prisma.CommentCreateNestedManyWithoutTaskInput
}

export type TaskUncheckedCreateInput = {
  id?: number
  title: string
  content?: string | null
  status?: $Enums.TaskStatus
  priority?: number
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: number
  assigneeId: number
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutTaskInput
}

export type TaskUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutTasksCreatedNestedInput
  assignee?: Prisma.UserUpdateOneRequiredWithoutTasksAssignedNestedInput
  comments?: Prisma.CommentUpdateManyWithoutTaskNestedInput
}

export type TaskUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.IntFieldUpdateOperationsInput | number
  assigneeId?: Prisma.IntFieldUpdateOperationsInput | number
  comments?: Prisma.CommentUncheckedUpdateManyWithoutTaskNestedInput
}

export type TaskCreateManyInput = {
  id?: number
  title: string
  content?: string | null
  status?: $Enums.TaskStatus
  priority?: number
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: number
  assigneeId: number
}

export type TaskUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TaskUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.IntFieldUpdateOperationsInput | number
  assigneeId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TaskListRelationFilter = {
  every?: Prisma.TaskWhereInput
  some?: Prisma.TaskWhereInput
  none?: Prisma.TaskWhereInput
}

export type TaskOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TaskCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  status?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
}

export type TaskAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
}

export type TaskMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  status?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
}

export type TaskMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  content?: Prisma.SortOrder
  status?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  dueDate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
}

export type TaskSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  priority?: Prisma.SortOrder
  creatorId?: Prisma.SortOrder
  assigneeId?: Prisma.SortOrder
}

export type TaskScalarRelationFilter = {
  is?: Prisma.TaskWhereInput
  isNot?: Prisma.TaskWhereInput
}

export type TaskCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutCreatorInput, Prisma.TaskUncheckedCreateWithoutCreatorInput> | Prisma.TaskCreateWithoutCreatorInput[] | Prisma.TaskUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutCreatorInput | Prisma.TaskCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.TaskCreateManyCreatorInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskCreateNestedManyWithoutAssigneeInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutAssigneeInput, Prisma.TaskUncheckedCreateWithoutAssigneeInput> | Prisma.TaskCreateWithoutAssigneeInput[] | Prisma.TaskUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutAssigneeInput | Prisma.TaskCreateOrConnectWithoutAssigneeInput[]
  createMany?: Prisma.TaskCreateManyAssigneeInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUncheckedCreateNestedManyWithoutCreatorInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutCreatorInput, Prisma.TaskUncheckedCreateWithoutCreatorInput> | Prisma.TaskCreateWithoutCreatorInput[] | Prisma.TaskUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutCreatorInput | Prisma.TaskCreateOrConnectWithoutCreatorInput[]
  createMany?: Prisma.TaskCreateManyCreatorInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUncheckedCreateNestedManyWithoutAssigneeInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutAssigneeInput, Prisma.TaskUncheckedCreateWithoutAssigneeInput> | Prisma.TaskCreateWithoutAssigneeInput[] | Prisma.TaskUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutAssigneeInput | Prisma.TaskCreateOrConnectWithoutAssigneeInput[]
  createMany?: Prisma.TaskCreateManyAssigneeInputEnvelope
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
}

export type TaskUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutCreatorInput, Prisma.TaskUncheckedCreateWithoutCreatorInput> | Prisma.TaskCreateWithoutCreatorInput[] | Prisma.TaskUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutCreatorInput | Prisma.TaskCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutCreatorInput | Prisma.TaskUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.TaskCreateManyCreatorInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutCreatorInput | Prisma.TaskUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutCreatorInput | Prisma.TaskUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUpdateManyWithoutAssigneeNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutAssigneeInput, Prisma.TaskUncheckedCreateWithoutAssigneeInput> | Prisma.TaskCreateWithoutAssigneeInput[] | Prisma.TaskUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutAssigneeInput | Prisma.TaskCreateOrConnectWithoutAssigneeInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutAssigneeInput | Prisma.TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
  createMany?: Prisma.TaskCreateManyAssigneeInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutAssigneeInput | Prisma.TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutAssigneeInput | Prisma.TaskUpdateManyWithWhereWithoutAssigneeInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutCreatorInput, Prisma.TaskUncheckedCreateWithoutCreatorInput> | Prisma.TaskCreateWithoutCreatorInput[] | Prisma.TaskUncheckedCreateWithoutCreatorInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutCreatorInput | Prisma.TaskCreateOrConnectWithoutCreatorInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutCreatorInput | Prisma.TaskUpsertWithWhereUniqueWithoutCreatorInput[]
  createMany?: Prisma.TaskCreateManyCreatorInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutCreatorInput | Prisma.TaskUpdateWithWhereUniqueWithoutCreatorInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutCreatorInput | Prisma.TaskUpdateManyWithWhereWithoutCreatorInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type TaskUncheckedUpdateManyWithoutAssigneeNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutAssigneeInput, Prisma.TaskUncheckedCreateWithoutAssigneeInput> | Prisma.TaskCreateWithoutAssigneeInput[] | Prisma.TaskUncheckedCreateWithoutAssigneeInput[]
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutAssigneeInput | Prisma.TaskCreateOrConnectWithoutAssigneeInput[]
  upsert?: Prisma.TaskUpsertWithWhereUniqueWithoutAssigneeInput | Prisma.TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
  createMany?: Prisma.TaskCreateManyAssigneeInputEnvelope
  set?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  disconnect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  delete?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  connect?: Prisma.TaskWhereUniqueInput | Prisma.TaskWhereUniqueInput[]
  update?: Prisma.TaskUpdateWithWhereUniqueWithoutAssigneeInput | Prisma.TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
  updateMany?: Prisma.TaskUpdateManyWithWhereWithoutAssigneeInput | Prisma.TaskUpdateManyWithWhereWithoutAssigneeInput[]
  deleteMany?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
}

export type EnumTaskStatusFieldUpdateOperationsInput = {
  set?: $Enums.TaskStatus
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type TaskCreateNestedOneWithoutCommentsInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutCommentsInput, Prisma.TaskUncheckedCreateWithoutCommentsInput>
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutCommentsInput
  connect?: Prisma.TaskWhereUniqueInput
}

export type TaskUpdateOneRequiredWithoutCommentsNestedInput = {
  create?: Prisma.XOR<Prisma.TaskCreateWithoutCommentsInput, Prisma.TaskUncheckedCreateWithoutCommentsInput>
  connectOrCreate?: Prisma.TaskCreateOrConnectWithoutCommentsInput
  upsert?: Prisma.TaskUpsertWithoutCommentsInput
  connect?: Prisma.TaskWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TaskUpdateToOneWithWhereWithoutCommentsInput, Prisma.TaskUpdateWithoutCommentsInput>, Prisma.TaskUncheckedUpdateWithoutCommentsInput>
}

export type TaskCreateWithoutCreatorInput = {
  title: string
  content?: string | null
  status?: $Enums.TaskStatus
  priority?: number
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  assignee: Prisma.UserCreateNestedOneWithoutTasksAssignedInput
  comments?: Prisma.CommentCreateNestedManyWithoutTaskInput
}

export type TaskUncheckedCreateWithoutCreatorInput = {
  id?: number
  title: string
  content?: string | null
  status?: $Enums.TaskStatus
  priority?: number
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  assigneeId: number
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutTaskInput
}

export type TaskCreateOrConnectWithoutCreatorInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskCreateWithoutCreatorInput, Prisma.TaskUncheckedCreateWithoutCreatorInput>
}

export type TaskCreateManyCreatorInputEnvelope = {
  data: Prisma.TaskCreateManyCreatorInput | Prisma.TaskCreateManyCreatorInput[]
  skipDuplicates?: boolean
}

export type TaskCreateWithoutAssigneeInput = {
  title: string
  content?: string | null
  status?: $Enums.TaskStatus
  priority?: number
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutTasksCreatedInput
  comments?: Prisma.CommentCreateNestedManyWithoutTaskInput
}

export type TaskUncheckedCreateWithoutAssigneeInput = {
  id?: number
  title: string
  content?: string | null
  status?: $Enums.TaskStatus
  priority?: number
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: number
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutTaskInput
}

export type TaskCreateOrConnectWithoutAssigneeInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskCreateWithoutAssigneeInput, Prisma.TaskUncheckedCreateWithoutAssigneeInput>
}

export type TaskCreateManyAssigneeInputEnvelope = {
  data: Prisma.TaskCreateManyAssigneeInput | Prisma.TaskCreateManyAssigneeInput[]
  skipDuplicates?: boolean
}

export type TaskUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.TaskWhereUniqueInput
  update: Prisma.XOR<Prisma.TaskUpdateWithoutCreatorInput, Prisma.TaskUncheckedUpdateWithoutCreatorInput>
  create: Prisma.XOR<Prisma.TaskCreateWithoutCreatorInput, Prisma.TaskUncheckedCreateWithoutCreatorInput>
}

export type TaskUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.TaskWhereUniqueInput
  data: Prisma.XOR<Prisma.TaskUpdateWithoutCreatorInput, Prisma.TaskUncheckedUpdateWithoutCreatorInput>
}

export type TaskUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.TaskScalarWhereInput
  data: Prisma.XOR<Prisma.TaskUpdateManyMutationInput, Prisma.TaskUncheckedUpdateManyWithoutCreatorInput>
}

export type TaskScalarWhereInput = {
  AND?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
  OR?: Prisma.TaskScalarWhereInput[]
  NOT?: Prisma.TaskScalarWhereInput | Prisma.TaskScalarWhereInput[]
  id?: Prisma.IntFilter<"Task"> | number
  title?: Prisma.StringFilter<"Task"> | string
  content?: Prisma.StringNullableFilter<"Task"> | string | null
  status?: Prisma.EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
  priority?: Prisma.IntFilter<"Task"> | number
  dueDate?: Prisma.DateTimeNullableFilter<"Task"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Task"> | Date | string
  creatorId?: Prisma.IntFilter<"Task"> | number
  assigneeId?: Prisma.IntFilter<"Task"> | number
}

export type TaskUpsertWithWhereUniqueWithoutAssigneeInput = {
  where: Prisma.TaskWhereUniqueInput
  update: Prisma.XOR<Prisma.TaskUpdateWithoutAssigneeInput, Prisma.TaskUncheckedUpdateWithoutAssigneeInput>
  create: Prisma.XOR<Prisma.TaskCreateWithoutAssigneeInput, Prisma.TaskUncheckedCreateWithoutAssigneeInput>
}

export type TaskUpdateWithWhereUniqueWithoutAssigneeInput = {
  where: Prisma.TaskWhereUniqueInput
  data: Prisma.XOR<Prisma.TaskUpdateWithoutAssigneeInput, Prisma.TaskUncheckedUpdateWithoutAssigneeInput>
}

export type TaskUpdateManyWithWhereWithoutAssigneeInput = {
  where: Prisma.TaskScalarWhereInput
  data: Prisma.XOR<Prisma.TaskUpdateManyMutationInput, Prisma.TaskUncheckedUpdateManyWithoutAssigneeInput>
}

export type TaskCreateWithoutCommentsInput = {
  title: string
  content?: string | null
  status?: $Enums.TaskStatus
  priority?: number
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creator: Prisma.UserCreateNestedOneWithoutTasksCreatedInput
  assignee: Prisma.UserCreateNestedOneWithoutTasksAssignedInput
}

export type TaskUncheckedCreateWithoutCommentsInput = {
  id?: number
  title: string
  content?: string | null
  status?: $Enums.TaskStatus
  priority?: number
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: number
  assigneeId: number
}

export type TaskCreateOrConnectWithoutCommentsInput = {
  where: Prisma.TaskWhereUniqueInput
  create: Prisma.XOR<Prisma.TaskCreateWithoutCommentsInput, Prisma.TaskUncheckedCreateWithoutCommentsInput>
}

export type TaskUpsertWithoutCommentsInput = {
  update: Prisma.XOR<Prisma.TaskUpdateWithoutCommentsInput, Prisma.TaskUncheckedUpdateWithoutCommentsInput>
  create: Prisma.XOR<Prisma.TaskCreateWithoutCommentsInput, Prisma.TaskUncheckedCreateWithoutCommentsInput>
  where?: Prisma.TaskWhereInput
}

export type TaskUpdateToOneWithWhereWithoutCommentsInput = {
  where?: Prisma.TaskWhereInput
  data: Prisma.XOR<Prisma.TaskUpdateWithoutCommentsInput, Prisma.TaskUncheckedUpdateWithoutCommentsInput>
}

export type TaskUpdateWithoutCommentsInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutTasksCreatedNestedInput
  assignee?: Prisma.UserUpdateOneRequiredWithoutTasksAssignedNestedInput
}

export type TaskUncheckedUpdateWithoutCommentsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.IntFieldUpdateOperationsInput | number
  assigneeId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TaskCreateManyCreatorInput = {
  id?: number
  title: string
  content?: string | null
  status?: $Enums.TaskStatus
  priority?: number
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  assigneeId: number
}

export type TaskCreateManyAssigneeInput = {
  id?: number
  title: string
  content?: string | null
  status?: $Enums.TaskStatus
  priority?: number
  dueDate?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  creatorId: number
}

export type TaskUpdateWithoutCreatorInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assignee?: Prisma.UserUpdateOneRequiredWithoutTasksAssignedNestedInput
  comments?: Prisma.CommentUpdateManyWithoutTaskNestedInput
}

export type TaskUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assigneeId?: Prisma.IntFieldUpdateOperationsInput | number
  comments?: Prisma.CommentUncheckedUpdateManyWithoutTaskNestedInput
}

export type TaskUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  assigneeId?: Prisma.IntFieldUpdateOperationsInput | number
}

export type TaskUpdateWithoutAssigneeInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creator?: Prisma.UserUpdateOneRequiredWithoutTasksCreatedNestedInput
  comments?: Prisma.CommentUpdateManyWithoutTaskNestedInput
}

export type TaskUncheckedUpdateWithoutAssigneeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.IntFieldUpdateOperationsInput | number
  comments?: Prisma.CommentUncheckedUpdateManyWithoutTaskNestedInput
}

export type TaskUncheckedUpdateManyWithoutAssigneeInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
  priority?: Prisma.IntFieldUpdateOperationsInput | number
  dueDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  creatorId?: Prisma.IntFieldUpdateOperationsInput | number
}


/**
 * Count Type TaskCountOutputType
 */

export type TaskCountOutputType = {
  comments: number
}

export type TaskCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  comments?: boolean | TaskCountOutputTypeCountCommentsArgs
}

/**
 * TaskCountOutputType without action
 */
export type TaskCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TaskCountOutputType
   */
  select?: Prisma.TaskCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TaskCountOutputType without action
 */
export type TaskCountOutputTypeCountCommentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CommentWhereInput
}


export type TaskSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  content?: boolean
  status?: boolean
  priority?: boolean
  dueDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
  assigneeId?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  comments?: boolean | Prisma.Task$commentsArgs<ExtArgs>
  _count?: boolean | Prisma.TaskCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["task"]>

export type TaskSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  content?: boolean
  status?: boolean
  priority?: boolean
  dueDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
  assigneeId?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["task"]>

export type TaskSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  content?: boolean
  status?: boolean
  priority?: boolean
  dueDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
  assigneeId?: boolean
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["task"]>

export type TaskSelectScalar = {
  id?: boolean
  title?: boolean
  content?: boolean
  status?: boolean
  priority?: boolean
  dueDate?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  creatorId?: boolean
  assigneeId?: boolean
}

export type TaskOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "content" | "status" | "priority" | "dueDate" | "createdAt" | "updatedAt" | "creatorId" | "assigneeId", ExtArgs["result"]["task"]>
export type TaskInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  comments?: boolean | Prisma.Task$commentsArgs<ExtArgs>
  _count?: boolean | Prisma.TaskCountOutputTypeDefaultArgs<ExtArgs>
}
export type TaskIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TaskIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  assignee?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $TaskPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Task"
  objects: {
    creator: Prisma.$UserPayload<ExtArgs>
    assignee: Prisma.$UserPayload<ExtArgs>
    comments: Prisma.$CommentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    content: string | null
    status: $Enums.TaskStatus
    priority: number
    dueDate: Date | null
    createdAt: Date
    updatedAt: Date
    creatorId: number
    assigneeId: number
  }, ExtArgs["result"]["task"]>
  composites: {}
}

export type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TaskPayload, S>

export type TaskCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TaskCountAggregateInputType | true
  }

export interface TaskDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
  /**
   * Find zero or one Task that matches the filter.
   * @param {TaskFindUniqueArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TaskFindUniqueArgs>(args: Prisma.SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Task that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Task that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskFindFirstArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TaskFindFirstArgs>(args?: Prisma.SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Task that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Tasks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tasks
   * const tasks = await prisma.task.findMany()
   * 
   * // Get first 10 Tasks
   * const tasks = await prisma.task.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TaskFindManyArgs>(args?: Prisma.SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Task.
   * @param {TaskCreateArgs} args - Arguments to create a Task.
   * @example
   * // Create one Task
   * const Task = await prisma.task.create({
   *   data: {
   *     // ... data to create a Task
   *   }
   * })
   * 
   */
  create<T extends TaskCreateArgs>(args: Prisma.SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Tasks.
   * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
   * @example
   * // Create many Tasks
   * const task = await prisma.task.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TaskCreateManyArgs>(args?: Prisma.SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Tasks and returns the data saved in the database.
   * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
   * @example
   * // Create many Tasks
   * const task = await prisma.task.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Tasks and only return the `id`
   * const taskWithIdOnly = await prisma.task.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Task.
   * @param {TaskDeleteArgs} args - Arguments to delete one Task.
   * @example
   * // Delete one Task
   * const Task = await prisma.task.delete({
   *   where: {
   *     // ... filter to delete one Task
   *   }
   * })
   * 
   */
  delete<T extends TaskDeleteArgs>(args: Prisma.SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Task.
   * @param {TaskUpdateArgs} args - Arguments to update one Task.
   * @example
   * // Update one Task
   * const task = await prisma.task.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TaskUpdateArgs>(args: Prisma.SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Tasks.
   * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
   * @example
   * // Delete a few Tasks
   * const { count } = await prisma.task.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TaskDeleteManyArgs>(args?: Prisma.SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tasks
   * const task = await prisma.task.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TaskUpdateManyArgs>(args: Prisma.SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Tasks and returns the data updated in the database.
   * @param {TaskUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
   * @example
   * // Update many Tasks
   * const task = await prisma.task.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Tasks and only return the `id`
   * const taskWithIdOnly = await prisma.task.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TaskUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TaskUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Task.
   * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
   * @example
   * // Update or create a Task
   * const task = await prisma.task.upsert({
   *   create: {
   *     // ... data to create a Task
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Task we want to update
   *   }
   * })
   */
  upsert<T extends TaskUpsertArgs>(args: Prisma.SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma.Prisma__TaskClient<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Tasks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
   * @example
   * // Count the number of Tasks
   * const count = await prisma.task.count({
   *   where: {
   *     // ... the filter for the Tasks we want to count
   *   }
   * })
  **/
  count<T extends TaskCountArgs>(
    args?: Prisma.Subset<T, TaskCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TaskCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Task.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TaskAggregateArgs>(args: Prisma.Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

  /**
   * Group by Task.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TaskGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TaskGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TaskGroupByArgs['orderBy'] }
      : { orderBy?: TaskGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Task model
 */
readonly fields: TaskFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Task.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TaskClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  assignee<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  comments<T extends Prisma.Task$commentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Task$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Task model
 */
export interface TaskFieldRefs {
  readonly id: Prisma.FieldRef<"Task", 'Int'>
  readonly title: Prisma.FieldRef<"Task", 'String'>
  readonly content: Prisma.FieldRef<"Task", 'String'>
  readonly status: Prisma.FieldRef<"Task", 'TaskStatus'>
  readonly priority: Prisma.FieldRef<"Task", 'Int'>
  readonly dueDate: Prisma.FieldRef<"Task", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Task", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Task", 'DateTime'>
  readonly creatorId: Prisma.FieldRef<"Task", 'Int'>
  readonly assigneeId: Prisma.FieldRef<"Task", 'Int'>
}
    

// Custom InputTypes
/**
 * Task findUnique
 */
export type TaskFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task findUniqueOrThrow
 */
export type TaskFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task findFirst
 */
export type TaskFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tasks to fetch.
   */
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tasks.
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tasks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tasks.
   */
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Task findFirstOrThrow
 */
export type TaskFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Task to fetch.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tasks to fetch.
   */
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Tasks.
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tasks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Tasks.
   */
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Task findMany
 */
export type TaskFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter, which Tasks to fetch.
   */
  where?: Prisma.TaskWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Tasks to fetch.
   */
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Tasks.
   */
  cursor?: Prisma.TaskWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Tasks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Tasks.
   */
  skip?: number
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Task create
 */
export type TaskCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * The data needed to create a Task.
   */
  data: Prisma.XOR<Prisma.TaskCreateInput, Prisma.TaskUncheckedCreateInput>
}

/**
 * Task createMany
 */
export type TaskCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Tasks.
   */
  data: Prisma.TaskCreateManyInput | Prisma.TaskCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Task createManyAndReturn
 */
export type TaskCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * The data used to create many Tasks.
   */
  data: Prisma.TaskCreateManyInput | Prisma.TaskCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Task update
 */
export type TaskUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * The data needed to update a Task.
   */
  data: Prisma.XOR<Prisma.TaskUpdateInput, Prisma.TaskUncheckedUpdateInput>
  /**
   * Choose, which Task to update.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task updateMany
 */
export type TaskUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Tasks.
   */
  data: Prisma.XOR<Prisma.TaskUpdateManyMutationInput, Prisma.TaskUncheckedUpdateManyInput>
  /**
   * Filter which Tasks to update
   */
  where?: Prisma.TaskWhereInput
  /**
   * Limit how many Tasks to update.
   */
  limit?: number
}

/**
 * Task updateManyAndReturn
 */
export type TaskUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * The data used to update Tasks.
   */
  data: Prisma.XOR<Prisma.TaskUpdateManyMutationInput, Prisma.TaskUncheckedUpdateManyInput>
  /**
   * Filter which Tasks to update
   */
  where?: Prisma.TaskWhereInput
  /**
   * Limit how many Tasks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Task upsert
 */
export type TaskUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * The filter to search for the Task to update in case it exists.
   */
  where: Prisma.TaskWhereUniqueInput
  /**
   * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
   */
  create: Prisma.XOR<Prisma.TaskCreateInput, Prisma.TaskUncheckedCreateInput>
  /**
   * In case the Task was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TaskUpdateInput, Prisma.TaskUncheckedUpdateInput>
}

/**
 * Task delete
 */
export type TaskDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  /**
   * Filter which Task to delete.
   */
  where: Prisma.TaskWhereUniqueInput
}

/**
 * Task deleteMany
 */
export type TaskDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Tasks to delete
   */
  where?: Prisma.TaskWhereInput
  /**
   * Limit how many Tasks to delete.
   */
  limit?: number
}

/**
 * Task.comments
 */
export type Task$commentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null
  where?: Prisma.CommentWhereInput
  orderBy?: Prisma.CommentOrderByWithRelationInput | Prisma.CommentOrderByWithRelationInput[]
  cursor?: Prisma.CommentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[]
}

/**
 * Task without action
 */
export type TaskDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
}
